// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    role          ROLE      @default(USER)
    image         String?
    accounts      Account[]
    sessions      Session[]
    shop          Shop[]
    rating        Rating?
    Order         Order[]
    createdAt     DateTime  @default(now())
}

enum ROLE {
    USER
    ADMIN
    BARBER
}

model Shop {
    id          String    @id @default(cuid())
    name        String
    address     String
    type        GENDER    @default(MALE)
    phone       String
    email       String
    queue       Int       @default(0)
    pictures    String[]
    description String
    opening     DateTime
    closing     DateTime
    lat         Float
    lng         Float
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    rating      Rating[]
    haircut     Haircut[]
    Order       Order[]
    createdAt   DateTime  @default(now())
}

enum GENDER {
    FEMALE
    MALE
    BOTH
}

model Rating {
    id        String   @id @default(cuid())
    rating    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
    shopId    String
    createdAt DateTime @default(now())
}

model Haircut {
    id          String   @id @default(cuid())
    name        String
    description String
    picture     String
    price       Int
    Shop        Shop     @relation(fields: [shopId], references: [id])
    shopId      String
    Order       Order[]
    createdAt   DateTime @default(now())
}

model Order {
    id          String   @id @default(cuid())
    date        DateTime
    status      STATUS   @default(NEW)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
    shopId      String
    haircut     Haircut  @relation(fields: [haircutId], references: [id], onDelete: Cascade)
    haircutId   String
    queueNumber Int
    createdAt   DateTime @default(now())
}

enum STATUS {
    NEW
    PENDING
    PAID
    DONE
    CANCELED
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
